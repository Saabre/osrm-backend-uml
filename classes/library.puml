' Copyright (c) 2013, Project OSRM, Dennis Luxen, others
' All rights reserved.
' 
' Redistribution and use in source and binary forms, with or without modification,
' are permitted provided that the following conditions are met:
' 
' Redistributions of source code must retain the above copyright notice, this list
' of conditions and the following disclaimer.
' Redistributions in binary form must reproduce the above copyright notice, this
' list of conditions and the following disclaimer in the documentation and/or
' other materials provided with the distribution.
' 
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
' ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
' ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@startuml

    ' OSRM.h

    class OSRM {
        -OSRM_impl *OSRM_pimpl_
        +OSRM(ServerPaths &paths, bool use_shared_memory = false)
        +~OSRM()
        +void RunQuery(RouteParameters &route_parameters, http::Reply &reply)
    }

    'OSRM_impl.cpp .h

    class OSRM_impl {
        -typedef std::unordered_map<std::string, BasePlugin *> PluginMap
        +OSRM_impl(ServerPaths &paths, bool use_shared_memory)
        +OSRM_impl(OSRM_impl &)
        +virtual ~OSRM_impl()
        +void RunQuery(RouteParameters &route_parameters, http::Reply &reply)
        -void RegisterPlugin(BasePlugin *plugin)
        -PluginMap plugin_map
        -bool use_shared_memory
        -SharedBarriers *barriervoid RegisterPlugin(BasePlugin *plugin)
        -BaseDataFacade<QueryEdge::EdgeData> *query_data_facade
    }


@enduml