' Copyright (c) 2013, Project OSRM, Dennis Luxen, others
' All rights reserved.
' 
' Redistribution and use in source and binary forms, with or without modification,
' are permitted provided that the following conditions are met:
' 
' Redistributions of source code must retain the above copyright notice, this list
' of conditions and the following disclaimer.
' Redistributions in binary form must reproduce the above copyright notice, this
' list of conditions and the following disclaimer in the documentation and/or
' other materials provided with the distribution.
' 
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
' ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
' ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@startuml

    ' BFSComponentExplorer.h

    class BFSComponentExplorer {
        -vector<unsigned> m_component_index_list
        -vector<NodeID> m_component_index_size
        -GraphT &m_graph
        -RestrictionMap &m_restriction_map
        -unordered_set<NodeID> &m_barrier_nodes

        +int GetComponentSize(NodeID node)
        +int GetNumberOfComponents()
        +void run()
        -unsigned ExploreComponent(queue<pair<NodeID, NodeID>> &bfs_queue, NodeID node, unsigned current_component)
    }

    ' DouglasPeucker.cpp .h

    class CoordinatePairCalculator <<(S,#83e6bc)>> {
        +float first_lat
        +float first_lon
        +float second_lat
        +float second_lon

        +CoordinatePairCalculator()
        +CoordinatePairCalculator(FixedPointCoordinate &coordinate_a, FixedPointCoordinate &coordinate_b)
        +int operator()(FixedPointCoordinate &other)
    }

    class DouglasPeucker {
        -vector<int> douglas_peucker_thresholds
        -pair<unsigned, unsigned> GeometryRange
        -stack<GeometryRange> recursion_stack

        +DouglasPeucker()
        +void Run(vector<SegmentInformation> &input_geometry, unsigned zoom_level)
    }

    ' ExtractRouteNames.h

    class RouteNames <<(S,#83e6bc)>> {
        string shortest_path_name_1
        string shortest_path_name_2
        string alternative_path_name_1
        string alternative_path_name_2
    }

    class ExtractRouteNames <<(S,#83e6bc)>> {
        -SegmentT PickNextLongestSegment(vector<SegmentT> &segment_list, unsigned blocked_name_id)
        +RouteNames operator()(vector<SegmentT> &shortest_path_segments, vector<SegmentT> &alternative_path_segments, DataFacadeT *facade)
    }

    ' IteratorBasedCRC32.h

    class IteratorbasedCRC32 {
        -typedef typename ContainerT::iterator IteratorType
        -unsigned crc
        -bool use_SSE42_CRC_function

        -unsigned SoftwareBasedCRC32(char *str, unsigned len)
        -unsigned SSE42BasedCRC32(char *str, unsigned len)
        -unsigned cpuid() const
        -bool DetectNativeCRC32Support()

        +IteratorbasedCRC32()
        +unsigned operator()(IteratorType iter, IteratorType end)
    }

    ' ObjectToBase64.h
    '   Function only

    ' PolylineCompressor.cpp .h

    class PolylineCompressor {
        -void encodeVectorSignedNumber(vector<int> &numbers, string &output)
        -void encodeNumber(int number_to_encode, string &output)
        +JSON::String printEncodedString(vector<SegmentInformation> &polyline)
        +JSON::Array printUnencodedString(vector<SegmentInformation> &polyline)
    }

    class TarjanNode <<(S,#83e6bc)>> {
        TarjanNode()
        unsigned index
        unsigned low_link
        bool on_stack
    }

    class TarjanEdgeData <<(S,#83e6bc)>> {
        TarjanEdgeData()
        TarjanEdgeData(int distance, unsigned name_id)
        int distance
        unsigned name_id
    }

    class TarjanStackFrame <<(S,#83e6bc)>> {
        TarjanStackFrame(NodeID v, NodeID parent)
        NodeID v
        NodeID parent
    }

    class TarjanSCC {
        -typedef DynamicGraph<TarjanEdgeData> TarjanDynamicGraph
        -typedef TarjanDynamicGraph::InputEdge TarjanEdge
        -typedef pair<NodeID, NodeID> RestrictionSource
        -typedef pair<NodeID, bool> RestrictionTarget
        -typedef vector<RestrictionTarget> EmanatingRestrictionsVector
        -typedef unordered_map<RestrictionSource, unsigned> RestrictionMap

        -vector<NodeInfo> m_coordinate_list
        -vector<EmanatingRestrictionsVector> m_restriction_bucket_list
        -shared_ptr<TarjanDynamicGraph> m_node_based_graph
        -unordered_set<NodeID> barrier_node_list
        -unordered_set<NodeID> traffic_light_list
        -unsigned m_restriction_counter
        -RestrictionMap m_restriction_map

        +TarjanSCC(int number_of_nodes, vector<NodeBasedEdge> &input_edges, vector<NodeID> &bn, vector<NodeID> &tl, vector<TurnRestriction> &irs, vector<NodeInfo> &nI)
        +~TarjanSCC()
        +void Run()

        -unsigned CheckForEmanatingIsOnlyTurn(NodeID u, NodeID v)
        -bool CheckIfTurnIsRestricted(NodeID u, NodeID v, NodeID w)
        -void DeleteFileIfExists(string &file_name)
    }

@enduml